permissions: {}

name: CI
on:
  push:
    branches:
      - "*"
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"
  pull_request:
    branches:
      - "*"
jobs:
  test:
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@v4
      - run: go build cmd/gocertmgr.go
      
      - name: Test valid gocertmgr flag, commands and arguments with default rootdir (current dir)
        run: |
          ./gocertmgr createkeyandcert -cn "Test CA" -selfsigned ca testca
          ./gocertmgr createkeyandcsr intermediateca
          ./gocertmgr signcsr -cn "Intermediate CA" -signer testca ca intermediateca
          ./gocertmgr createkeyandcert -cn "Server Cert" -dns testserver.example.com -signer intermediateca server servercert
          ./gocertmgr createkeyandcert -cn "Client Cert" -signer testca client clientcert

      - name: Test rootdir from certmgr.json
        run: |
          echo '{"rootdir": "."}' > certmgr.json
          ./gocertmgr -config certmgr.json createkeyandcert -cn "Test CA 2" -selfsigned ca testca2

      - name: Test rootdir from environment variable
        run: |
          export CERTMGR_ROOT_DIR="."
          ./gocertmgr -config certmgr.json createkeyandcert -cn "Test CA 3" -selfsigned ca testca3
      
      - name: Test gocertmgr flag, commands and arguments
        run: |
          ./gocertmgr invalidcommand || echo "Invalid command handled correctly"
          ./gocertmgr createkeyandcert || echo "Missing args handled correctly"
          ./gocertmgr createkeyandcert -cn "Invalid" -selfsigned invalid testinvalid || echo "Invalid cert type handled correctly"
          ./gocertmgr createkeyandcert -cn "Test" -signer nonexistent server test || echo "Invalid signer handled correctly"
          ./gocertmgr createkeyandcert -cn "Test" -dns "invalid..dns" -signer testca server test || echo "Invalid DNS handled correctly"

  builds:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    strategy:
      matrix:
        platform:
          - linux
          - darwin
          - windows
        arch:
          - amd64
          - arm64
    steps:
      - uses: actions/checkout@v4
      - run: go build -o "gocertmgr-${{ matrix.platform }}-${{ matrix.arch }}" cmd/gocertmgr.go
        env:
          GOOS: "${{ matrix.platform }}"
          GOARCH: "${{ matrix.arch }}"
      - uses: actions/upload-artifact@v4
        with:
          name: "gocertmgr-${{ matrix.platform }}-${{ matrix.arch }}"
          path: "gocertmgr-${{ matrix.platform }}-${{ matrix.arch }}"
  
  release:
    needs: [test, builds]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && contains(github.ref, '.')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          path: builds
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: contains(github.ref, '-')
          files: builds/**/*
          body: |
            ## gocertmgr ${{ github.ref_name }}
            
            ### Binaries
            - Linux (amd64, arm64)
            - macOS (amd64, arm64)
            - Windows (amd64, arm64)
            
            ### Installation
            Download the appropriate binary for your system and add it to your PATH.
            `export PATH=$PATH:<path/to/gocertmgr>`
